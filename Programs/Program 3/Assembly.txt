// constant stack: 32
start
xor r1 r1 //r1 is i = 0
//Q:
nop
nop
tap r1
inc r1
con r2
lsl r2 // r2 = 64
ldr r2 r0 // r0 is data_mem[64]
con r3 // r3 = 0x20
xor r0 r3
slf r3
//P:
nop
con r3
xlf r3
ldr r2 r0
inc r2
cmp r0 r3
bne 1100 // goto Q
con r0
lsl r0
con r3
lsr r3
lsr r3
add r0 r3
inc r3
inc r3 // making 74
cmp r3 r2
blt 1100 // goto P
inc r3
inc r3
inc r3
inc r3
inc r3
// Lp1:
ldr r2 r0
inc r2
con r1
xlf r1
cmp r0 r1
bne 0010 // goto Fix
nop
cmp r3 r2
blt 1110 // goto Lp1
xor r1 r1
nop
nop
bal 0101 // goto Lp2
// Fix:
mov r0 r0
bnx 0010 // goto ElseFix
con r0
lsl r0
lsl r0
nop
bal 0010 // goto ContFix
nop
nop
// ElseFix:
con r3
xor r1 r3
xor r3 r0
lsl r0
lsr r0
// ContFix:
xor r1 r1
str r1 r0
inc r1
// Lp2:
nop
nop
ldr r2 r0
inc r2
mov r0 r0
bnx 0010 // goto Else2
xlf r0
con r0
lsl r0
lsl r0
nop
nop
bal 0001 // goto Cont2
// Else2:
xlf r0
lsl r0
lsr r0
// Cont2:
str r1 r0
inc r1
mov r2 r2
blt 0001 // goto Cont3
bal 1011 // goto Lp2
nop
nop
// Cont3:
con r3
lsl r3
// Lp3:
con r2
str r1 r2
inc r1
cmp r3 r1
blt 1111 // goto Lp3
end
Here is the instruction set for an 8-bit processor (for a challenge). Can be covered to 9-bit by just ignoring bit 0.

My ISA has 4 general purpose registers (8-bit), 1 special purpose register that is an LFSR (7-bit) and a lookup table of constants which contains a constant pointer (6-bit) to 1 element in the table. I use flags checking for zero, negative, and bit parity.

LFSR
The LFSR is stored in a separate module and holds the current LFSR state and taps, each of which is 7-bit. This register comes with the functionality to set tap, set initial state, update to next state, and xor state into a general purpose register. [tap, slf, lfn, xlf]. I chose this because all 3 programs require use of a LFSR and having dedicated hardware that supports limited functionality is more apt than using GP registers for taps and LFSR state. This also allows me to make do with only 4 general purpose register easily reducing general purpose register address to 2-bits with many instructions instead of 3 bits or 2 bits with restricted instructions. The disadvantage is that there is an internal parity check and shifter that can't be shared with the other registers.

Constant Table
There is a lookup table of size 64 containing a register pointing to one of the elements which can be incremented using an instruction and can the constant can be retrieved into a general purpose register. [cpi, con]. I chose this so it is easy to use 8-bit constants in my program. I also can greatly reduce my instruction size since no constants go in instructions. This also allows us to not have to store constants in the registers as we can pull them up anytime we need. Since we already know the programs we are going to run, it is easy to add a set of constants in the lookup table (while writing a program) that can be retrieved into any register.

GP registers
There are 4 general purpose registers as most of the repeated calculations or storage of constants can be handled by the hardware mentioned above. These four registers are stored in the regfile which uses the last 4 instructions bits to determine 'regA' and 'reg'/'regB'. These 4 registers support a large variety of instructions to make it easy to write programs for programs 1-3. We can increment, shift and bit flip a single register. We have add, sub, mov, and, or, xor binary operations where the second register gets updated with the result from calculation from first 2.

Branching and Condition Bits
We can relative branch using all equality and inequality conditions as well as using even and odd bit parity (and always and never). It is not possible to absolute branch as we only need to write 3 programs and also since absolute branching would require a 10-bit value from somewhere which we cannot provide since internal data paths have to be 8 bits wide and registers are 8 bits wide. Since most branches will be to nearby instructions, this is sufficient. Branch instructions contain a single register that gives signed branch offset. It is also not possible to conditionally run any other instruction apart from branching to reduce instruction size. Currently, flags are updated with every instruction and have undefined behaviour for many instructions including branch so branching twice in a row is not a good idea.

Memory Loads and Stores
This is a reg-reg ISA and only load and store from mem to reg and reg to mem are provided. We can load the value from memory to a register and store value from a register to memory. There is only 1 addressing mode for each. The memory address will be provided through regA. regB will be written to in 'ldr' and the value from regB will be return in data_mem in 'str'. No offsets for simplicity as registers can be updated to new address values.

To form an instruction, use the opcode followed by two bits to describe register number for each register needed for instruction. Example:

add r0, r2
    |
    V
1011 00 10

Instruction List (order of regs is reversed from ARM to match the order in opcodes) (flags updated for all):

Name	#Regs	Opcode		Details

start	0	00000000	Program start/finish state. PC doesn't update until start is called. Ack is on in this state

nop	1	0001X0		Branch (relative) to value in reg (never). No operation.
bal	1	0001X1		Branch (relative) to value in reg

bxr	1	001000		Branch (relative) to value in reg if parity flag
bnx	1	001001		Branch (relative) to value in reg if not parity flag
beq	1	001010		Branch (relative) to value in reg if zero flag
bne	1	001011		Branch (relative) to value in reg if not zero flag

ble	1	001100		Branch (relative) to value in reg (on condition)
bgt	1	001101		Branch (relative) to value in reg (on condition)
blt	1	001110		Branch (relative) to value in reg (on condition)
bge	1	001111		Branch (relative) to value in reg (on condition)

lfn	0	01000XXX	Update LFSR to next state
cpi	0	01001XXX	Increment constant pointer

str	2	0101		data_mem[regA] = regB

xlf	1	011000		reg = reg ^ LFSR
con	1	011001		reg = value at const pointer
slf	1	011010		LFSR = reg
tap	1	011011		LFSR Tap = reg

ldr	2	0111		regB = data_mem[regA]

inc	1	100000		reg++
not	1	100001		reg = ~reg
lsr	1	100010		reg = reg >> 1
lsl	1	100011		reg = reg << 1

and	2	1001		regB = regB & regA

orr	2	1010		regB = regB | regA

add	2	1011		regB = regB + regA

sub	2	1100		regB = regB - regA

cmp	2	1101		regB - regA (to avoid destroying regB)

xor	2	1110		regB = regA ^ regB

mov	2	1111		regB = regA


Opcode Choice
I have carefully chose opcodes so as to reduce control and data path logic.
For example, last 2 bits always correspond to reg for unary operations and regB for binary operations which is both used as first register and destination which means there only needs to be two reg inputs to the reg file instead of 3 and ALU_out can be directly connected to RegWriteValue.
I also arranged my instructions in such an order that the ALU has to do minimal work to choose which instruction is to be run by looking at the positions of the don't cares in my control logic and arranging instructions accordingly. (Only bits 6:4 of instruction mostly matter for ALU to choose instruction instead of bits 7:2).

I still have space for some instructions (though that would make my control unit pretty heavy on combinational logic).